/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.aldrin.billing.gui.panel;

import com.aldrin.billing.dao.impl.DBConnection;
import com.aldrin.billing.gui.JFrameApp;
import com.aldrin.billing.util.LoginUser;
import com.formdev.flatlaf.FlatClientProperties;
import java.awt.Color;
import java.awt.GradientPaint;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Java Programming with Aldrin
 */
public class JPanelDashboard extends javax.swing.JPanel {

    private JFrameApp jFrameApp;
    private LoginUser logUser = new LoginUser();

    /**
     * Creates new form JPanelDashboard
     */
    public JPanelDashboard(JFrameApp jFrameApp) {
        initComponents();
        this.jFrameApp = jFrameApp;
        jPanelFrameSales.putClientProperty(FlatClientProperties.STYLE,
                "[light]border: 0,0,0,0,shade(@background,30%),,8;" + "[dark]border: 0,0,0,0,tint(@background,30%),,8");
        jPanelFrameServices.putClientProperty(FlatClientProperties.STYLE,
                "[light]border: 0,0,0,0,shade(@background,30%),,8;" + "[dark]border: 0,0,0,0,tint(@background,30%),,8");

        if (new LoginUser().getUser() != null) {
            addPanels();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanelFrameSales = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jPanelBarChart = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanelFrameServices = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanelBarChart1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(940, 40));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));

        jLabel2.setText("Dashboard");
        jPanel4.add(jLabel2);

        add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jPanelFrameSales.setPreferredSize(new java.awt.Dimension(900, 250));
        jPanelFrameSales.setLayout(new java.awt.BorderLayout());

        jPanel24.setOpaque(false);
        jPanel24.setPreferredSize(new java.awt.Dimension(2, 2));

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanelFrameSales.add(jPanel24, java.awt.BorderLayout.WEST);

        jPanelBarChart.setOpaque(false);
        jPanelBarChart.setPreferredSize(new java.awt.Dimension(270, 200));
        jPanelBarChart.setLayout(new java.awt.BorderLayout());
        jPanelFrameSales.add(jPanelBarChart, java.awt.BorderLayout.CENTER);

        jPanel5.setOpaque(false);
        jPanel5.setPreferredSize(new java.awt.Dimension(270, 2));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanelFrameSales.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel22.setOpaque(false);
        jPanel22.setPreferredSize(new java.awt.Dimension(270, 2));

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanelFrameSales.add(jPanel22, java.awt.BorderLayout.SOUTH);

        jPanel23.setOpaque(false);
        jPanel23.setPreferredSize(new java.awt.Dimension(2, 2));

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );

        jPanelFrameSales.add(jPanel23, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanelFrameSales);

        jPanelFrameServices.setPreferredSize(new java.awt.Dimension(900, 250));
        jPanelFrameServices.setLayout(new java.awt.BorderLayout());

        jPanel25.setOpaque(false);
        jPanel25.setPreferredSize(new java.awt.Dimension(2, 2));

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanelFrameServices.add(jPanel25, java.awt.BorderLayout.WEST);

        jPanelBarChart1.setOpaque(false);
        jPanelBarChart1.setPreferredSize(new java.awt.Dimension(270, 200));
        jPanelBarChart1.setLayout(new java.awt.BorderLayout());
        jPanelFrameServices.add(jPanelBarChart1, java.awt.BorderLayout.CENTER);

        jPanel6.setOpaque(false);
        jPanel6.setPreferredSize(new java.awt.Dimension(270, 2));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanelFrameServices.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel26.setOpaque(false);
        jPanel26.setPreferredSize(new java.awt.Dimension(270, 2));

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanelFrameServices.add(jPanel26, java.awt.BorderLayout.SOUTH);

        jPanel27.setOpaque(false);
        jPanel27.setPreferredSize(new java.awt.Dimension(2, 2));

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );

        jPanelFrameServices.add(jPanel27, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanelFrameServices);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelBarChart;
    private javax.swing.JPanel jPanelBarChart1;
    private javax.swing.JPanel jPanelFrameSales;
    private javax.swing.JPanel jPanelFrameServices;
    // End of variables declaration//GEN-END:variables

    private Connection connection;
    private DBConnection dbConn = new DBConnection();

    private DefaultCategoryDataset fetchDataFromDatabaseSales(String query) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dbConn.getDBConn();
        try {
            // Connect to your database
            connection = dbConn.getCon();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(query);

            while (resultSet.next()) {
                String date = resultSet.getString("IDate");
                double salesAmount = resultSet.getDouble("amount");
                dataset.addValue(salesAmount, "Sales", date);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
//            try {
//                if (connection != null) {
//                    connection.close();
//                }
//            } catch (SQLException e) {
//                e.printStackTrace();
//            }
        }

        return dataset;
    }

    private JPanel createChartPanelSales(String title, DefaultCategoryDataset dataset) {
        JFreeChart chart = ChartFactory.createLineChart(
                title,
                "Date",
                "Sales Amount",
                dataset
        );

        // Set a gradient background
        CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(new GradientPaint(0, 0, Color.YELLOW, 0, getHeight(), Color.GREEN));

        return new ChartPanel(chart);
    }

    public void addPanels() {
        jPanelFrameSales.updateUI();
        jPanelFrameSales.add(createChartPanelSales("Sales", fetchDataFromDatabaseSales("SELECT \n"
                + "    `product`.`ProductName`\n"
                + "    , DATE_FORMAT(`invoice`.`InvoiceDate`, '%b.%d') AS IDate, `invoice`.`InvoiceDate`\n"
                + "    , `invoicedetail`.`Quantity`\n"
                + "    , `invoicedetail`.`UnitPrice`\n"
                + "    , SUM(`invoice`.`TotalAmount`) AS amount \n"
                + "    , `invoicedetail`.`InvoiceID`\n"
                + "FROM\n"
                + "    `user`\n"
                + "    INNER JOIN `schema_billing`.`role` \n"
                + "        ON (`user`.`role_id` = `role`.`id`)\n"
                + "    INNER JOIN `payment` \n"
                + "        ON (`payment`.`UserID` = `user`.`id`)\n"
                + "    INNER JOIN `invoice` \n"
                + "        ON (`payment`.`InvoiceID` = `invoice`.`InvoiceID`)\n"
                + "    INNER JOIN `customer` \n"
                + "        ON (`invoice`.`CustomerID` = `customer`.`CustomerID`)\n"
                + "    INNER JOIN `invoicedetail` \n"
                + "        ON (`invoicedetail`.`InvoiceID` = `invoice`.`InvoiceID`)\n"
                + "    INNER JOIN `product` \n"
                + "        ON (`invoicedetail`.`ProductID` = `product`.`ProductID`) WHERE `user`.`id` =" + logUser.getUser().getId() + " \n"
                + "         AND `invoice`.`InvoiceDate` >= CURRENT_TIMESTAMP() - INTERVAL 7 DAY\n"
                + "  AND `invoice`.`InvoiceDate` <= CURRENT_TIMESTAMP() \n"
                + "        GROUP BY     `product`.`ProductName`\n"
                + "    , `invoicedetail`.`Quantity`\n"
                + "    , `invoicedetail`.`UnitPrice`\n"
                + "    , `invoicedetail`.`InvoiceID` ORDER BY `invoicedetail`.`InvoiceID` ASC ")));

        jPanelFrameServices.add(createChartPanelServices("Product Quantities Over Time", fetchDataFromDatabaseServices("SELECT \n"
                + "    `product`.`ProductName`\n"
                + "    , DATE_FORMAT(`invoice`.`InvoiceDate`, '%b.%d') AS IDate, `invoice`.`InvoiceDate`\n"
                + "    , `invoicedetail`.`Quantity`\n"
                + "    , `invoicedetail`.`UnitPrice`\n"
                + "    , SUM(`invoice`.`TotalAmount`) AS amount \n"
                + "    , `invoicedetail`.`InvoiceID`\n"
                + "FROM\n"
                + "    `user`\n"
                + "    INNER JOIN `schema_billing`.`role` \n"
                + "        ON (`user`.`role_id` = `role`.`id`)\n"
                + "    INNER JOIN `payment` \n"
                + "        ON (`payment`.`UserID` = `user`.`id`)\n"
                + "    INNER JOIN `invoice` \n"
                + "        ON (`payment`.`InvoiceID` = `invoice`.`InvoiceID`)\n"
                + "    INNER JOIN `customer` \n"
                + "        ON (`invoice`.`CustomerID` = `customer`.`CustomerID`)\n"
                + "    INNER JOIN `invoicedetail` \n"
                + "        ON (`invoicedetail`.`InvoiceID` = `invoice`.`InvoiceID`)\n"
                + "    INNER JOIN `product` \n"
                + "        ON (`invoicedetail`.`ProductID` = `product`.`ProductID`) WHERE `user`.`id` =" + logUser.getUser().getId() + " \n"
                + "        AND `invoice`.`InvoiceDate` >= CURRENT_TIMESTAMP()- INTERVAL 7 DAY\n"
                + "  AND `invoice`.`InvoiceDate` <= CURRENT_TIMESTAMP() \n"
                + "        \n"
                + "        GROUP BY     `product`.`ProductName`\n"
                + "    , `invoicedetail`.`Quantity`\n"
                + "    , `invoicedetail`.`UnitPrice`\n"
                + "    , `invoicedetail`.`InvoiceID` ORDER BY `invoicedetail`.`InvoiceID` ASC ")));
    }

    private DefaultCategoryDataset fetchDataFromDatabaseServices(String query) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        try {
            // Connect to the MySQL database
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(query);

            // Add data to the dataset
            while (resultSet.next()) {
                String product = resultSet.getString("ProductName");
                String date = resultSet.getString("IDate");
                int quantity = resultSet.getInt("Quantity");
                dataset.addValue(quantity, product, date);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
//            try {
//                if (connection != null) {
//                    connection.close();
//                }
//            } catch (SQLException e) {
//                e.printStackTrace();
//            }
        }

        return dataset;
    }

    private JPanel createChartPanelServices(String title, DefaultCategoryDataset dataset) {
        // Create a line chart using the dataset
        JFreeChart chart = ChartFactory.createLineChart(
                title,
                "Date",
                "Quantity",
                dataset
        );

        // Customize the chart background with a gradient
        CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(new GradientPaint(0, 0, Color.LIGHT_GRAY, 0, getHeight(), Color.WHITE));

        // Create and return the chart panel
        return new ChartPanel(chart);
    }

}
